plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
evaluationDependsOn ':xplat'

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":xplat").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "emi_loot.mixins.json"
    }

    mods {
        main {
            sourceSet sourceSets.main
            sourceSet project(':xplat').sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    //annotationProcessor(compileOnly("io.github.llamalad7:mixinextras-common:0.4.0"))
    //implementation(include("io.github.llamalad7:mixinextras-forge:0.4.0"))

    modCompileOnly "dev.emi:emi-forge:${rootProject.emi_version}:api"
    modImplementation "dev.emi:emi-forge:${rootProject.emi_version}"

    common(project(path: ":xplat", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":xplat", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":xplat").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
